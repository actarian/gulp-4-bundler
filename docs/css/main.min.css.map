{"version":3,"sources":["src/sass/components/_typography.scss","node_modules/bootstrap/scss/mixins/_breakpoints.scss","src/sass/views/_header.scss","src/sass/views/_hero.scss","src/sass/main.scss"],"names":[],"mappings":"AAEA;EACI,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,cAAc,EAAA;;AAGlB;;;;;;EAMI,SAAS,EAAA;;AAGb;EACI,eAAe;EACf,iBAAiB;EACjB,gBAAgB,EAAA;EAHpB;IAMQ,gBAAgB,EAAA;;AAIxB;EACI,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,cAAc;EACd,mBAAmB,EAAA;EALvB;IAQQ,cAAc,EAAA;;AAItB;EACI,eAAe;EACf,iBAAiB;EACjB,gBAAgB,EAAA;;AAGpB;EACI,eAAe;EACf,iBAAiB;EACjB,gBAAgB,EAAA;;AAGpB;EACI,gBAAgB;EAChB,mBAAmB;EACnB,eAAe;EACf,gBAAgB;EAChB,mBAAmB;EACnB,yBAAyB;EACzB,cAAc,EAAA;;ACcd;EDTA;IACI,eAAe;IACf,iBAAiB,EAAA;EAGrB;IACI,eAAe;IACf,iBAAiB,EAAA;EAGrB;IACI,eAAe;IACf,iBAAiB,EAAA;EAGrB;IACI,eAAe;IACf,iBAAiB,EAAA;EAGrB;IACI,eAAe;IACf,iBAAiB,EAAA,EACpB;;AEvFL;EACI,eAAe;EACf,6BAA6B,EAAA;;ACFjC;EACI,mBAAmB;EACnB,gBAAgB,EAAA;;ACSpB;;EAEC,WAAW;EACX,YAAY;EACZ,UAAU;EACV,SAAS,EAAA;;AAGV;EACC,iBAAiB;EACjB,iCAAiC,EAAA;;AAGlC;EACC,iBAAiB;EACjB,SAAS;EACT,UAAU,EAAA;;AAGX;EACC,iBAAiB;EACjB,cAAc;EACd,UAAU,EAAA;;AAGX;EACC,kBAAkB,EAAA","file":"docs/css/main.min.css","sourcesContent":["@import \"../mixins\";\n\nbody {\n    font-size: 18px;\n    font-weight: 200;\n    line-height: 32px;\n    color: #4e4b4b;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n    margin: 0;\n}\n\n.h1 {\n    font-size: 90px;\n    line-height: 96px;\n    font-weight: 200;\n\n    .em {\n        font-weight: 600;\n    }\n}\n\n.h2 {\n    font-size: 74px;\n    line-height: 80px;\n    font-weight: 200;\n    color: #272727;\n    margin-bottom: 90px;\n\n    .em {\n        color: #a5a1a1;\n    }\n}\n\n.h3 {\n    font-size: 52px;\n    line-height: 60px;\n    font-weight: 200;\n}\n\n.h4 {\n    font-size: 36px;\n    line-height: 46px;\n    font-weight: 600;\n}\n\n.h5 {\n    margin-top: 80px;\n    margin-bottom: 40px;\n    font-size: 13px;\n    font-weight: 400;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    color: #272727;\n}\n\n@include media-breakpoint-down(md) {\n\n    .h1 {\n        font-size: 60px;\n        line-height: 60px;\n    }\n\n    .h2 {\n        font-size: 50px;\n        line-height: 50px;\n    }\n\n    .h3 {\n        font-size: 35px;\n        line-height: 35px;\n    }\n\n    .h4 {\n        font-size: 25px;\n        line-height: 25px;\n    }\n\n    .h5 {\n        font-size: 13px;\n        line-height: 20px;\n    }\n\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","header {\n    padding: 30px 0;\n    border-bottom: 1px solid #eee;\n}",".section--hero {\n    background: #fdfdfd;\n    padding: 100px 0;\n}","@import \"bootstrap/scss/mixins\";\n@import \"bootstrap/scss/functions\";\n@import \"mixins\";\n@import \"colors\";\n@import \"variables\";\n\n@import \"components/typography\";\n\n@import \"views/header\";\n@import \"views/hero\";\n\nhtml,\nbody {\n\twidth: 100%;\n\theight: 100%;\n\tpadding: 0;\n\tmargin: 0;\n}\n\nbody {\n\tbackground: white;\n\t-webkit-overflow-scrolling: touch;\n}\n\n.page {\n\tmin-height: 100vh;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n.wrapper {\n\tmin-height: 100vh;\n\tmargin: 0 auto;\n\tpadding: 0;\n}\n\n.section {\n\tposition: relative;\n}\n"]}